#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Project: sprunge
# Author: kevr <kevr@0cost.org>
# Description: A tool which uploads data from stdin to sprunge.us
# Copyright (C) 2014 Kevin Morris
import sys
import os
import argparse
import requests
from select import select
from subprocess import Popen

url = "http://sprunge.us"
timeout = int(os.environ.get("SPRUNGE_SERVER_TIMEOUT", 5))

def has_data(fd):
    return select([fd], [], [], 0.0) == ([fd], [], [])

def quit(code, msg):
    print(msg)
    return code

def get_paste(id):
    paste_url = f"{url}/{id}"

    try:
        response = requests.get(paste_url, timeout=timeout)
    except requests.exceptions.ReadTimeout as exc:
        return 1, "error: http request timed out"
    except requests.exceptions.ConnectTimeout as exc:
        return 1, "error: http connection timed out"

    if response.status_code != requests.codes.ok:
        return 1, f"error: invalid http status code {response.status_code}"

    content = response.content.decode().rstrip()

    # sprunge.us specific syntax for when a user attempts to
    # get an invalid paste id. Test it directly here; reduce
    # the amount of false positives as much as possible by
    # checking the content against the given paste id.
    if content == f"{id} not found.":
        return 1, f"error: paste with id '{id}' could not be found"

    return 0, content

def post_paste(text):
    post_data = { "sprunge": text }

    try:
        response = requests.post(url, data=post_data, timeout=timeout)
    except requests.exceptions.ReadTimeout as exc:
        return 1, "error: http request timed out"
    except requests.exceptions.ConnectTimeout as exc:
        return 1, "error: http connection timed out"

    if response.status_code != requests.codes.ok:
        return 1, f"error: invalid http status code {response.status_code}"

    return 0, response.content.decode().rstrip()


def get_default_clipper():
    if "WAYLAND_DISPLAY" in os.environ:
        return "wl-copy -p"
    elif "DISPLAY" in os.environ:
        return "xclip -sel primary"
    return "echo 'error: unable to find Wayland or Xorg'"


def main():
    help_description = f"Upload text from stdin to {url}. If [id] "
    help_description += "is provided,\nthe corresponding paste is fetched "
    help_description += "and displayed instead."
    footer="""environment variables:
  SPRUNGE_CLIPPER (default: 'xclip -sel primary')
  SPRUNGE_SERVER_TIMEOUT (default: 5)
"""

    default_clipper = os.environ.get("SPRUNGE_CLIPPER", get_default_clipper())
    parser = argparse.ArgumentParser(
        description=help_description,
        epilog=footer,
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("--clip-command", "-cc", metavar="clip_command",
                        default=default_clipper,
                        help="clipboard command (default: SPRUNGE_CLIPPER)")
    parser.add_argument("--clipboard", "-c", metavar="clipboard",
                        action="store_const", const=True, default=False,
                        help="pipe stdout to --clip-command")
    parser.add_argument("id", nargs="?",
                        help="fetches and displays a sprunge paste")
    args = parser.parse_args()

    # If [id] was provided by the user.
    if args.id is not None:
        http = False

        if args.id[:4] == "http":
            if args.id[:len(url)] != url:
                return quit(1, f"error: URLs must begin with '{url}'")
            http = True

        paste_id = args.id.split("/")[-1] if http else args.id
        if not paste_id:
            return quit(1, "error: no id provided")

        return_code, response = get_paste(paste_id)
        if return_code:
            return quit(return_code, response)

        print(response)
    else:
        try:
            stdin = sys.stdin.read()
        except UnicodeDecodeError as exc:
            return quit(2, f"error: {str(exc)}")

        if not has_data(sys.stdin):
            return quit(1, "error: no data given via stdin")

        return_code, response = post_paste(stdin)
        if return_code:
            return quit(return_code, response)

        print(response)

        # If --clipboard was given, additionally use --clipboard-command
        # to save the resulting URL to the clipboard.
        if args.clipboard:
            proc = Popen([
                "/bin/sh", "-c",
                f'echo -n "{response}" | {args.clip_command}'
            ])
            proc.wait()

    return 0

# main execution
if __name__ == "__main__":
    e = main()
    sys.exit(e)

