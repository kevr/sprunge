#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Project: sprunge
# Author: kevr <kevr@0cost.org>
# Description: A tool which uploads data from stdin to sprunge.us
# Copyright (C) 2014 Kevin Morris
import sys
import os
import argparse
import requests
from select import select
from subprocess import Popen

url = "http://sprunge.us"
timeout = int(os.environ.get("SPRUNGE_SERVER_TIMEOUT", 5))

def has_data(fd):
    return select([fd], [], [], 0.0) == ([fd], [], [])

def quit(code, msg):
    print(msg)
    return code

def get_paste(id):
    paste_url = f"{url}/{id}"

    response = requests.get(paste_url, timeout=timeout)
    if response.status_code != 200:
        return 1, f"error: invalid http status code {response.status_code}"

    return 0, response.content.decode().rstrip()

def post_paste(text):
    post_data = { "sprunge": text }

    response = requests.post(url, data=post_data, timeout=timeout)
    if response.status_code != 200:
        return 1, f"error: invalid http status code {response.status_code}"

    return 0, response.content.decode().rstrip()

## Sorry for the C-style functions, I prefer them
def main():
    help_description = f"Upload text from stdin to {url}. If [id] "
    help_description += "is provided,\nthe corresponding paste is fetched "
    help_description += "and displayed instead."
    footer="""environment variables:
  SPRUNGE_CLIPPER (default: 'xclip -sel primary')
  SPRUNGE_SERVER_TIMEOUT (default: 5)
"""

    parser = argparse.ArgumentParser(
            description=help_description,
            epilog=footer,
            formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("--clip-command", "-cc",
            metavar="clip_command",
            default=os.environ.get("SPRUNGE_CLIPPER", "xclip -sel primary"),
            help="clipboard command (default: SPRUNGE_CLIPPER)")
    parser.add_argument("--clipboard", "-c",
            metavar="clipboard",
            action="store_const",
            const=True,
            default=False,
            help="pipe stdout to --clip-command")
    parser.add_argument("id",
            nargs="?",
            help="when provided, fetches and displays a sprunge paste")
    args = parser.parse_args()

    # If [id] was provided by the user.
    if args.id is not None:
        if args.id[:4] == "http" and args.id[:len(url)] != url:
            return quit(1,
                f"error: invalid id provided; URLs must begin with '{url}'")

        paste_id = args.id.split("/")[-1]
        if not paste_id:
            return quit(1, "error: no id provided")

        return_code, response = get_paste(paste_id)
        if return_code:
            return quit(return_code, response)

        print(response)
    else:
        try:
            stdin = sys.stdin.read()
        except UnicodeDecodeError as exc:
            return quit(2, f"error: {str(exc)}")

        if not has_data(sys.stdin):
            return quit(1, "error: no data given via stdin")

        return_code, response = post_paste(stdin)
        if return_code:
            return quit(return_code, response)

        print(response)

        # If --clipboard was given, additionally use --clipboard-command
        # to save the resulting URL to the clipboard.
        if args.clipboard:
            proc = Popen([
                "/bin/sh", "-c",
                f'echo -n "{response}" | {args.clip_command}'
            ])
            proc.wait()

    return 0

# main execution
if __name__ == "__main__":
    e = main()
    sys.exit(e)

